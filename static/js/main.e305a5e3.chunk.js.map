{"version":3,"sources":["cmps/NavBar.js","services/httpService.js","services/storageService.js","store/actions/rootActions.js","cmps/SearchBar.js","cmps/LocationDetails.js","pages/WeatherPage.js","pages/FavoritesPage.js","App.js","store/reducers/rootReducer.js","store/store.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","active","backgroundColor","NavBar","classes","className","AppBar","position","Typography","variant","ButtonGroup","color","Button","component","NavLink","to","activeClassName","API_KEY","process","BASE_URL","ajax","endpoint","a","metricStr","axios","get","res","data","console","log","set","key","val","localStorage","setItem","JSON","stringify","parse","getItem","SET_LOCATION","SET_LOCATIONS","SET_WEATHER","SET_FORECAST","UPDATE_FAVORITES","getLocation","searchStr","dispatch","getState","location","type","payload","getLocations","locations","getWeather","locKey","currLocWeather","getForecast","forecast","updateFavorites","favorite","favorites","favLocations","newFavorites","some","fav","Key","filter","storageService","useState","React","background","border","margin","SearchBar","onSearch","onGetWeather","input","setInput","useSelector","state","onSubmit","ev","value","preventDefault","loc","toLowerCase","LocalizedName","Autocomplete","style","width","freeSolo","size","options","map","onChange","onInputChange","target","renderInput","params","TextField","label","onClick","flex","display","padding","grid","marginTop","justifyContent","paper","textAlign","height","borderRadius","flexDirection","tempDisplay","alignSelf","minWidth","btn","maxHeight","selfCenter","temperatureContainer","gap","marginBottom","mainContainer","favoriteContainer","favoriteIcon","fontSize","cursor","notFavorite","thumbnail","maxWidth","LocationDetails","isMetric","setIsMetric","weather","useDispatch","useEffect","isFavorite","name","Temperature","Container","Grid","container","item","xs","md","src","WeatherIcon","Metric","Value","Imperial","format","LocalObservationDateTime","WeatherText","newFavorite","celsius","iconNumber","direction","DailyForecasts","length","dailyCast","idx","sm","lg","Paper","Date","Day","Icon","Minimum","Maximum","WeatherPage","isFullName","alignCenter","FavoritesPage","removeFavorite","WeatherApp","path","initState","isLoading","forcast","rootReducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.e305a5e3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport ToolBar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    active: {\r\n        backgroundColor: '#39af63',\r\n        \"&:hover\": {\r\n            backgroundColor: '#39af63'\r\n        }\r\n    }\r\n}))\r\n\r\nexport default function NavBar() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <header className={classes.root}    >\r\n            <AppBar position=\"static\">\r\n                <ToolBar>\r\n                    <Typography variant=\"h6\" className={classes.root}>\r\n                        WezzerApp\r\n                    </Typography>\r\n                    <ButtonGroup variant=\"contained\" color=\"primary\">\r\n                        <Button component={NavLink} to=\"/Kosta-Goncharov-20-04-2021\" activeClassName={classes.active}>\r\n                            Weather\r\n                        </Button>\r\n                        <Button component={NavLink} to=\"/favorites\" activeClassName={classes.active}>\r\n                            Favorites\r\n                        </Button>\r\n                    </ButtonGroup>\r\n\r\n                </ToolBar>\r\n            </AppBar>\r\n\r\n\r\n        </header>\r\n    )\r\n}\r\n","import axios from 'axios';\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\nconst BASE_URL = 'https://dataservice.accuweather.com';\r\n\r\nexport async function ajax(endpoint, metricStr = '') {\r\n    try {\r\n        const res = await axios.get(`${BASE_URL}/${endpoint}apikey=${API_KEY}&language=en-us${metricStr}`);\r\n        return res.data;\r\n    } catch (err) {\r\n        return console.log(err)\r\n    }\r\n}","function set(key, val) {\r\n    localStorage.setItem(key, JSON.stringify(val))\r\n    return val;\r\n}\r\n\r\nfunction get(key) {\r\n    return JSON.parse(localStorage.getItem(key));\r\n}\r\n\r\nexport default {\r\n    set,\r\n    get\r\n}","import { ajax } from '../../services/httpService';\r\nimport { location, locations, currLocWeather, forecast } from '../../data/data';\r\nimport storageService from '../../services/storageService';\r\n\r\nexport const SET_LOCATION = 'SET_LOCATION';\r\nexport const SET_LOCATIONS = 'SET_LOCATIONS';\r\n\r\nexport const SET_WEATHER = 'SET_WEATHER';\r\n\r\nexport const SET_FORECAST = 'SET_FORECAST';\r\n\r\nexport const UPDATE_FAVORITES = 'UPDATE_FAVORITES';\r\n\r\n\r\nexport const getLocation = (searchStr = 'Tel Aviv') => async (dispatch, getState) => {\r\n    const location = await ajax(`locations/v1/cities/search?q=${searchStr}&`);\r\n    dispatch({\r\n        type: SET_LOCATION,\r\n        payload: location[0]\r\n    })\r\n}\r\n\r\nexport const setLocation = (location) => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_LOCATION,\r\n        payload: location\r\n    })\r\n}\r\n\r\nexport const getLocations = (searchStr) => async (dispatch, getState) => {\r\n    const locations = await ajax(`locations/v1/cities/autocomplete?q=${searchStr}&`)\r\n    return dispatch({\r\n        type: SET_LOCATIONS,\r\n        payload: locations\r\n    })\r\n}\r\n\r\nexport const getWeather = (locKey = '215854') => async (dispatch, getState) => {\r\n    const currLocWeather = await ajax(`currentconditions/v1/${locKey}?`);\r\n    dispatch({\r\n        type: SET_WEATHER,\r\n        payload: currLocWeather[0]\r\n    })\r\n}\r\n\r\nexport const getForecast = (locKey = '215854') => async (dispatch, getState) => {\r\n    const forecast = await ajax(`forecasts/v1/daily/5day/${locKey}?`, '&metric=true');\r\n    dispatch({\r\n        type: SET_FORECAST,\r\n        payload: forecast\r\n    })\r\n}\r\n\r\nexport const updateFavorites = (favorite) => (dispatch, getState) => {\r\n    const favorites = getState().favLocations;\r\n    let newFavorites = [...favorites];\r\n    const isFavorite = favorites.some(fav => fav.Key === favorite.Key);\r\n\r\n    if (!isFavorite) {\r\n        newFavorites = [...favorites, favorite];\r\n    } else {\r\n        newFavorites = newFavorites.filter(fav => fav.Key !== favorite.Key);\r\n    }\r\n    storageService.set('favorites', newFavorites)\r\n    dispatch({\r\n        type: UPDATE_FAVORITES,\r\n        payload: newFavorites\r\n    })\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { getWeather } from '../store/actions/rootActions';\r\nconst { useState } = React;\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        // background: 'linear-gradient(45deg, #FE6888, #FF8E53)',\r\n        background: '#39af63',\r\n        border: 0,\r\n        color: 'white',\r\n        margin: '16px 0 8px 0',\r\n        '&:hover': {\r\n            background: '#39af63'\r\n        }\r\n    }\r\n})\r\n\r\nexport default function SearchBar({ onSearch, onGetWeather }) {\r\n    const [input, setInput] = useState('');\r\n    const locations = useSelector(state => state.locations);\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (ev) => {\r\n        const { value } = ev.target;\r\n        if (!value) return;\r\n        setInput(value);\r\n        onSearch(value)\r\n    }\r\n\r\n    const onCityClicked = (searchStr) => {\r\n        if (!searchStr) return;\r\n        onSubmit(null, searchStr);\r\n    }\r\n\r\n    const onSubmit = (ev, value) => {\r\n        if (ev) ev.preventDefault();\r\n        if (!value) return;\r\n        const location = locations.filter(loc => value.toLowerCase() === loc.LocalizedName.toLowerCase());\r\n        if (!location[0]) return;\r\n        onGetWeather(location[0])\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-bar\">\r\n            <form onSubmit={onSubmit} className=\"flex\">\r\n                <Autocomplete\r\n                    style={{ width: 300 }}\r\n                    freeSolo\r\n                    size=\"small\"\r\n                    options={locations.map((loc) => loc.LocalizedName)}\r\n                    onChange={(ev, location) => onCityClicked(location)}\r\n                    onInputChange={handleChange}\r\n                    renderInput={(params) => (\r\n                        <TextField {...params} label=\"Search\" margin=\"normal\" variant=\"outlined\" />\r\n                    )}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={classes.root}\r\n                    onClick={(ev) => { onSubmit(ev, input) }}\r\n                >\r\n                    Submit</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Grid, Paper, Typography, Container, Button, ButtonGroup } from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { getWeather, getLocation, getForecast, updateFavorites } from '../store/actions/rootActions';\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    flex: {\r\n        display: 'inline-flex',\r\n        padding: '0'\r\n    },\r\n    grid: {\r\n        marginTop: '20px',\r\n        justifyContent: 'space-between'\r\n    },\r\n    paper: {\r\n        textAlign: 'center',\r\n        height: '200px',\r\n        width: '200px',\r\n        borderRadius: '5px',\r\n        margin: '10px auto',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-around',\r\n        padding: '7px'\r\n    },\r\n    tempDisplay: {\r\n        alignSelf: 'center',\r\n        minWidth: '70px'\r\n    },\r\n    btn: {\r\n        padding: '0',\r\n        margin: '0',\r\n        minWidth: '40px',\r\n        maxHeight: '40px',\r\n        alignSelf: 'center'\r\n    },\r\n    selfCenter: {\r\n        textAlign: 'center',\r\n    },\r\n    temperatureContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        gap: '10px',\r\n        marginBottom: '25px'\r\n    },\r\n    mainContainer: {\r\n        textAlign: 'center'\r\n    },\r\n    favoriteContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        padding: '15px 30px'\r\n    },\r\n    favoriteIcon: {\r\n        color: 'red',\r\n        fontSize: '1.8rem',\r\n        '&:hover': {\r\n            cursor: 'pointer'\r\n        }\r\n    },\r\n    notFavorite: {\r\n        color: 'grey',\r\n        fontSize: '1.8rem',\r\n        '&:hover': {\r\n            cursor: 'pointer'\r\n        }\r\n    },\r\n    thumbnail: {\r\n        maxWidth: '75px',\r\n        alignSelf: 'center'\r\n    },\r\n})\r\n\r\nexport default function LocationDetails() {\r\n    const [isMetric, setIsMetric] = useState(true);\r\n    const classes = useStyles();\r\n    const weather = useSelector(state => state.currLocWeather);\r\n    const location = useSelector(state => state.location);\r\n    const locations = useSelector(state => state.favLocations);\r\n    const forecast = useSelector(state => state.forecast);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getLocation(location.LocalizedName))\r\n        dispatch(getWeather(location.Key))\r\n        dispatch(getForecast(location.Key))\r\n    }, [])\r\n\r\n    const isFavorite = locations.some(loc => loc.name === location.LocalizedName);\r\n\r\n    const addFavorite = () => {\r\n        const newFavorite = {\r\n            Key: location.Key,\r\n            name: location.LocalizedName,\r\n            celsius: weather.Temperature.Metric.Value,\r\n            iconNumber: weather.WeatherIcon\r\n        }\r\n        dispatch(updateFavorites(newFavorite))\r\n    }\r\n    return (\r\n        <div className=\"location-details\">\r\n            {\r\n                weather.Temperature &&\r\n                <Container maxWidth=\"lg\">\r\n                    <Grid container>\r\n                        <Grid item xs={12} md={4} className={classes.temperatureContainer}>\r\n                            <img className={classes.thumbnail} src={`https://developer.accuweather.com/sites/default/files/${weather.WeatherIcon < 10 ? ('0' + weather.WeatherIcon) : weather.WeatherIcon}-s.png`} />\r\n                            {isMetric ?\r\n                                <Typography className={classes.tempDisplay} variant=\"h5\">{weather.Temperature.Metric.Value}℃</Typography>\r\n                                :\r\n                                <Typography className={classes.tempDisplay} variant=\"h5\">{weather.Temperature.Imperial.Value}℉</Typography>\r\n                            }\r\n                            <ButtonGroup>\r\n                                <Button className={classes.btn} onClick={() => setIsMetric(true)}>℃</Button>\r\n                                <Button className={classes.btn} onClick={() => setIsMetric(false)}>℉</Button>\r\n                            </ButtonGroup>\r\n\r\n\r\n                        </Grid>\r\n                        <Grid item xs={7} md={4} className={classes.mainContainer}>\r\n                            <Typography variant=\"h4\">{location.LocalizedName}</Typography>\r\n                            <Typography variant=\"h5\"><Moment format=\"ddd, HH:mm \">{weather.LocalObservationDateTime}</Moment></Typography>\r\n                            <Typography>{weather.WeatherText}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={5} md={4} className={classes.favoriteContainer}>\r\n                            <FavoriteIcon className={isFavorite ? classes.favoriteIcon : classes.notFavorite} onClick={addFavorite} />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid\r\n                        container\r\n                        className={classes.grid}\r\n                        direction=\"row\"\r\n                    >\r\n                        {forecast && forecast.DailyForecasts.length ?\r\n                            forecast.DailyForecasts.map((dailyCast, idx) => (\r\n                                <Grid item xs={12} sm={6} md={4} lg={2} key={idx}>\r\n                                    <Paper className={classes.paper}>\r\n                                        <Container className={classes.flex}>\r\n                                            <Typography variant=\"h5\" className={classes.alignSelf}><Moment format=\"dddd\">{dailyCast.Date}</Moment></Typography>\r\n                                        </Container>\r\n                                        <img className=\"thumbnail\" src={`https://developer.accuweather.com/sites/default/files/${dailyCast.Day.Icon < 10 ? ('0' + dailyCast.Day.Icon) : dailyCast.Day.Icon}-s.png`} />\r\n                                        <Typography>{dailyCast.Temperature.Minimum.Value}-{dailyCast.Temperature.Maximum.Value}℃</Typography>\r\n                                    </Paper>\r\n                                </Grid>\r\n                            ))\r\n                            : <Typography variant=\"h6\" style={{ margin: '0 auto' }}>No favorites yet</Typography>\r\n\r\n                        }\r\n                    </Grid>\r\n                </Container>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport SearchBar from '../cmps/SearchBar';\r\nimport { useDispatch } from 'react-redux';\r\nimport LocationDetails from '../cmps/LocationDetails';\r\n\r\nimport { getLocations, getLocation, setLocation, getWeather, getForecast } from '../store/actions/rootActions';\r\n\r\nexport default function WeatherPage() {\r\n    const dispatch = useDispatch();\r\n\r\n    const onSearch = (searchStr, isFullName = false) => {\r\n        isFullName ? dispatch(getLocation(searchStr)) : dispatch(getLocations(searchStr))\r\n    }\r\n\r\n    const onGetWeather = (loc) => {\r\n        dispatch(setLocation(loc))\r\n        dispatch(getWeather(loc.Key))\r\n        dispatch(getForecast(loc.Key))\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather-page\">\r\n            <SearchBar onSearch={onSearch} onGetWeather={onGetWeather} />\r\n            <div className=\"weather-details\">\r\n                <LocationDetails />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updateFavorites } from '../store/actions/rootActions';\r\n\r\nimport { Paper, Grid, Typography, Container } from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    grid: {\r\n        marginTop: '20px'\r\n    },\r\n    paper: {\r\n        textAlign: 'center',\r\n        height: '200px',\r\n        width: '200px',\r\n        borderRadius: '5px',\r\n        margin: '10px auto',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-around'\r\n    },\r\n    alignCenter: {\r\n        textAlign: 'center'\r\n    },\r\n    flex: {\r\n        display: 'flex'\r\n    },\r\n    flexGrow: {\r\n        flexGrow: '1'\r\n    },\r\n    favoriteIcon: {\r\n        color: 'red',\r\n        alignSelf: 'center',\r\n        '&:hover': {\r\n            cursor: 'pointer'\r\n        }\r\n    }\r\n})\r\n\r\nexport default function FavoritesPage() {\r\n    const favLocations = useSelector(state => state.favLocations)\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n\r\n    const removeFavorite = (loc) => {\r\n        dispatch(updateFavorites(loc))\r\n    }\r\n\r\n    return (\r\n        <div className=\"favorites-page\">\r\n            <Grid\r\n                container\r\n                className={classes.grid}\r\n                direction=\"row\"\r\n            >\r\n                {favLocations.length\r\n                    ? favLocations.map(loc => (\r\n                        <Grid item xs={12} sm={6} md={4} lg={2} key={loc.Key}>\r\n                            <Paper className={classes.paper}>\r\n                                <Container className={classes.flex}>\r\n                                    <Typography variant=\"h5\" className={classes.flexGrow}>{loc.name}</Typography>\r\n                                    <FavoriteIcon className={classes.favoriteIcon} onClick={() => removeFavorite(loc)} />\r\n                                </Container>\r\n                                <img className=\"thumbnail\" src={`https://developer.accuweather.com/sites/default/files/${loc.iconNumber < 10 ? ('0' + loc.iconNumber) : loc.iconNumber}-s.png`} />\r\n                                <Typography>{loc.celsius}℃</Typography>\r\n\r\n                            </Paper>\r\n                        </Grid>\r\n                    ))\r\n                    : <Typography variant=\"h6\" style={{ margin: '0 auto' }}>No favorites yet</Typography>\r\n\r\n                }\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import NavBar from './cmps/NavBar';\r\nimport WeatherPage from './pages/WeatherPage';\r\nimport FavoritesPage from './pages/FavoritesPage';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nfunction WeatherApp() {\r\n  return (\r\n\r\n    <Router>\r\n      <div className=\"App\">\r\n        <NavBar />\r\n        <section className=\"main-content\">\r\n          <Switch>\r\n            <Route path=\"/Kosta-Goncharov-20-04-2021\">\r\n              <WeatherPage />\r\n            </Route>\r\n            <Route path=\"/favorites\">\r\n              <FavoritesPage />\r\n            </Route>\r\n          </Switch>\r\n        </section>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default WeatherApp;\r\n","import storageService from '../../services/storageService';\r\nimport { SET_LOCATION, SET_LOCATIONS, SET_WEATHER, UPDATE_FAVORITES, SET_FORECAST } from '../actions/rootActions';\r\n\r\nconst initState = {\r\n    isLoading: false,\r\n    location: {},\r\n    locations: [],\r\n    currLocWeather: {},\r\n    forcast: [],\r\n    favLocations: storageService.get('favorites') || []\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case SET_LOCATION:\r\n            // expecting object\r\n            return {\r\n                ...state,\r\n                location: action.payload\r\n            }\r\n        case SET_LOCATIONS:\r\n            // expecting array\r\n            return {\r\n                ...state,\r\n                locations: action.payload\r\n            }\r\n        case SET_WEATHER:\r\n            return {\r\n                ...state,\r\n                currLocWeather: action.payload\r\n            }\r\n        case UPDATE_FAVORITES:\r\n            return {\r\n                ...state,\r\n                favLocations: [...action.payload]\r\n            }\r\n        case SET_FORECAST:\r\n            return {\r\n                ...state,\r\n                forecast: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'fontsource-roboto';\nimport './styles/main.scss';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}